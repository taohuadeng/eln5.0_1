<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

    <!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
    <bean
            class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!-- 读取jdbc.properties文件 -->
    <context:property-placeholder
            location="classpath:/properties/jdbc.properties,classpath:/properties/security.properties,classpath:/properties/app.properties"/>

    <!-- you can inject bean property easily by @Value("#{appProps['xxxUrl']}") -->
    <util:properties id="appProps" location="classpath:/properties/app.properties"/>

    <bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="2"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="10"/>
    </bean>

    <bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="jdbc:postgresql://localhost:5432/eln5.0_a"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="2"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="10"/>
    </bean>

    <!-- mysql 动态数据源设置-->
    <bean id="dataSource" class="com.thd.base.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <!-- 标识符类型 -->
            <!-- <map key-type="com.thd.base.util.DynamicDataSourceGlobal">
                 <entry key="dataSource1" value-ref="dataSource1"/>
                 <entry key="dataSource2" value-ref="dataSource2"/>
             </map>-->
            <map key-type="java.lang.String">

            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource2"/>
    </bean>

    <!-- 配置会话工厂 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="true">
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="entityInterceptor">
            <bean class="com.thd.base.dao.interceptor.BaseDaoInterceptor"/>
        </property>-->
        <property name="packagesToScan">
            <list>
                <value>com.thd.**.model</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    ${hibernate.dialect}
                </prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate4.SpringSessionContext
                </prop>
            </props>
        </property>
        <property name="namingStrategy">
            <bean class="org.hibernate.cfg.ImprovedNamingStrategy"/>
        </property>
        <!--<property name="eventListeners">
            <map>
                <entry key="merge">
                    <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
                </entry>
            </map>
        </property>-->
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- Enable Annotated Spring beans:@Component @Service @Repository @Controller etc -->
    <context:annotation-config/>

    <context:component-scan base-package="com.thd">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- <aop:config proxy-target-class="true">
         <aop:advisor pointcut="execution(* com.thd..*Service.*(..))" advice-ref="txAdvice"/>
     </aop:config>

     <aop:aspectj-autoproxy/>

     <tx:advice id="txAdvice" transaction-manager="transactionManager">
         <tx:attributes>
             <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="query*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="load*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="*" propagation="REQUIRED"/>
         </tx:attributes>
     </tx:advice>-->

    <!--配置spring事务管理器，统一管理sessionFactory的事务-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用Spring封装的Mail Sender -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}"/>
        <property name="username" value="${mail.username}"/>
        <property name="password" value="${mail.password}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
                <prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</prop>
            </props>
        </property>
    </bean>

    <!-- 用于生成HTML邮件内容的Freemarker配置 -->
    <bean id="freemarkerConfiguration"
          class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="classpath:/page-ftl"/>
    </bean>

    <!-- 启用事务注解 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>